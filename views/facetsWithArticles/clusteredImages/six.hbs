<!DOCTYPE html>
<html>
	{{#> head title='Clustered Images - v6' subtitle='' }}
	<style type="text/css">
		main {
		    width: 100%;
		}
		h2 {
			color: #fff;
		    font-size: 2.5vw;
		    text-shadow:
			   -1px -1px 0 #000,  
			    1px -1px 0 #000,
			    -1px 1px 0 #000,
			     1px 1px 0 #000;
		}
		button {
			position: relative;
			display: block;
			margin-top: 10px;
		}
		.cluster {
		    display: inline-block;
		    width: 200px;
		    height: 200px;
		    position: relative;
		    width: 25%;
		    cursor: pointer;
		}
		.selected {
			opacity: 0.4;
		}
		.cluster--images {
			position: absolute;
			width: 100%;
			height: 100%;
		}
		.cluster--images img {
			position: absolute;
			width: auto;
			height: auto;
			max-height: 70%;
			left: 0px;
    		top: 25px;
		}
		.cluster--articles {
			position: absolute;
			top: -20px;
		}
		.cluster--articles a {
			display: inline-block;
			width: 100%;
			color: #333;
		}
		.cluster--articles img {
			float: left;
			max-width: 100px;
		}
		.cluster--articles .text {
			padding-left: 10px;
			text-align: left;
			font-size: 14px;
		}
		.cluster--articles a:nth-child(n+4) {
			display: none;
		}
		.mask--block {
			overflow: hidden;
		}
		.mask--circle {
			clip-path: circle(55%);
		}
		.mask--nonagon {
			clip-path: polygon(50% 0%, 83% 12%, 100% 43%, 94% 78%, 68% 100%, 32% 100%, 6% 78%, 0% 43%, 17% 12%);
		}
		.centerPos {
			position: absolute;
			margin: 0;
		    top: 50%;
		    left: 50%;
		    transform: translate(-50%, -50%);
		    text-align: center;
		}
		.controls {
			position: absolute;
			display: block;
			padding: 10px;
			top: 5px;
			right: 5px;
			width: auto;
			height: auto;
			font-size: 12px;	
		}
		.guideline {
			border: 1px dashed black;
		}
		.hidden {
			display: none;
		}
	</style>
	{{/head}}
	<body>
		<main class="centerPos">
			{{#each data}}
			<div class="cluster">
				<div class="cluster--images mask--circle">
				{{#each articles}}
				{{#if images.0.url}}
					<img class="" src="{{imgPath images.0.url}}" />
				{{/if}}
				{{/each}}
				</div>
				<div class="cluster--articles hidden">
				{{#each articles}}
				{{#if images.0.url}}
					<a href="{{location.uri}}">
						<div>
							<img class="" src="{{imgPath images.0.url}}" />
							<p class="text">{{title.title}}</p>
						</div>
					</a>
				{{/if}}
				{{/each}}
				</div>
				<h2 class="centerPos">{{facetName}}</h2>
			</div>
			{{/each}}
		</main>
		<fieldset class="controls">
			<legend>Controls:</legend>
			<label><input type="radio" name="mask" id="boxMask">Box Mask</label><br />
			<label><input type="radio" name="mask" id="circleMask" checked>Circle Mask</label><br />
			<label><input type="radio" name="mask" id="nonagonMask">Nonagon Mask</label><br />
			<hr />
			<label><input type="radio" name="positioning" id="randomPos">Randomised positions</label><br />
			<label><input type="radio" name="positioning" id="setPos" checked>Set positions</label>
			<hr />
			<label><input type="checkbox" name="guide" id="guideLine">Guide</label>
		</fieldset>

		<script type="text/javascript">
			const boxMask 					= document.getElementById('boxMask');
			const circleMask 				= document.getElementById('circleMask');
			const nonagonMask 				= document.getElementById('nonagonMask');
			const guideBtn 					= document.getElementById('guideLine');
			const randomiseBtn 				= document.getElementById('randomPos');
			const setBtn 					= document.getElementById('setPos');
			const clustersCollection 		= document.getElementsByClassName('cluster');
			const clusterImagesCollection	= document.getElementsByClassName('cluster--images');
			const clusters 					= [].slice.call(clustersCollection);
			const clusterImages 			= [].slice.call(clusterImagesCollection);


			function init(){
				addListeners();
				setPositions();
			}

			function addListeners(){
				randomiseBtn.addEventListener('click', randomPositions);
				setBtn.addEventListener('click', setPositions);

				boxMask.addEventListener('click', function(){
					toggleMasks('block', clusterImages);
				});

				circleMask.addEventListener('click', function(){
					toggleMasks('circle', clusterImages);
				});

				nonagonMask.addEventListener('click', function(){
					toggleMasks('nonagon', clusterImages);
				});

				guideBtn.addEventListener('click', function(){
					clusters.forEach(cluster => {
						cluster.classList.toggle("guideline");
					})
				});

				clusters.forEach(cluster => {
					cluster.addEventListener('click', function(){
						const heading = cluster.getElementsByTagName('h2')[0];
						const images = cluster.getElementsByClassName('cluster--images')[0];
						const articles = cluster.getElementsByClassName('cluster--articles')[0];

						if(images.classList.contains("selected")){
							heading.classList.remove("hidden");
							images.classList.remove("selected");
							articles.classList.add('hidden');
						} else {
							heading.classList.add("hidden");
							images.classList.add("selected");
							articles.classList.remove('hidden');
						}
					});
				});
			}

			function toggleMasks(type, images){
				images.forEach(img => {
					img.classList.remove("mask--block");
					img.classList.remove("mask--circle");
					img.classList.remove("mask--nonagon");

					switch(type){
						case 'block':
							img.classList.add("mask--block");
						break;
						case 'circle':
							img.classList.add("mask--circle");
						break;
						case 'nonagon':
							img.classList.add("mask--nonagon");
						break;
					}
				});
			}

			function setPositions(){
				clusterImages.forEach(imgCluster => {
					const maxPos = 80;
					const images = [].slice.call(imgCluster.getElementsByTagName('img'));
					const positions = [
						{h: 100, v: 100},
						{h: -75, v: 100},
						{h: -75, v: -75},
						{h: 105, v: -75},
						{h: 20, v: -75},
						{h: 20, v: 100},
						{h: -75, v: 15},
						{h: 100, v: 15},
						{h: 20, v: 15},
					];

					for (var i = 0; i < images.length; i++) {
						if(positions[i]){
							images[i].style.cssText = `transform: translate(${positions[i].h}%, ${positions[i].v}%);`;
						} else {
							images[i].style.cssText = `transform: translate(300%, 300%);`;
						}
					}
				});
			}

			function randomPositions(){
				clusterImages.forEach(imgCluster => {
					const maxPos = 80;
					const images = [].slice.call(imgCluster.getElementsByTagName('img'));

					images.forEach(img => {
						const hor = Math.floor(Math.random() * maxPos);
						const ver = Math.floor(Math.random() * maxPos);

						horPlusMinus = Math.random() < 0.5 ? -hor : hor;
						verPlusMinus = Math.random() < 0.5 ? -ver : ver;

						img.style.cssText = `transform: translate(${horPlusMinus}%, ${verPlusMinus}%);`;
					});
				});
			}

			init();
		</script>
	</body>
</html>