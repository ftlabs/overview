<!DOCTYPE html>
<html>
	{{#> head title='Clustered Images - v6' subtitle='' }}
	<style type="text/css">
		main {
		    width: 100%;
		}
		h2 {
			color: #fff;
		    width: 1000%;
		    font-size: 2.5vw;
		    text-shadow:
			   -1px -1px 0 #000,  
			    1px -1px 0 #000,
			    -1px 1px 0 #000,
			     1px 1px 0 #000;
		}
		button {
			position: relative;
			display: block;
			margin-top: 10px;
		}
		.cluster {
		    display: inline-block;
		    width: 200px;
		    height: 200px;
		    position: relative;
		    width: 25%;
		    cursor: pointer;
		}
		.cluster--images {
			position: absolute;
			width: 100%;
			height: 100%;
		}
		.cluster--images img {
			position: absolute;
			width: auto;
			height: auto;
			max-width: 200px;
			left: 0px;
    		top: 25px;
		}
		.circlemask {
			clip-path: circle(55%);
		}
		.centerPos {
			position: absolute;
			margin: 0;
		    top: 50%;
		    left: 50%;
		    transform: translate(-50%, -50%);
		    text-align: center;
		}
		.controls {
			position: absolute;
			display: block;
			padding: 10px;
			top: 5px;
			right: 5px;
			width: auto;
			height: auto;
			font-size: 12px;	
		}
		.guideline {
			border: 1px dashed black;
		}
	</style>
	{{/head}}
	<body>
		<main class="centerPos">
			{{#each topTopics}}
			<div class="cluster">
				<div class="cluster--images circlemask">
				{{#each articles}}
				{{#if images.0.url}}
					<img class="" src="{{imgPath images.0.url}}" />
				{{/if}}
				{{/each}}
				</div>
				<h2 class="centerPos">{{facetName}}</h2>
			</div>
			{{/each}}
		</main>
		<fieldset class="controls">
			<legend>Controls:</legend>
			<label><input type="checkbox" name="mask" id="clipMask" checked>Mask</label><br />
			<label><input type="checkbox" name="guide" id="guideLine">Guide</label>
			<hr />
			<label><input type="radio" name="positioning" id="randomPos">Randomised positions</label><br />
			<label><input type="radio" name="positioning" id="setPos" checked>Set positions</label>
		</fieldset>

		<script type="text/javascript">
			const maskBtn 					= document.getElementById('clipMask');
			const guideBtn 					= document.getElementById('guideLine');
			const randomiseBtn 				= document.getElementById('randomPos');
			const setBtn 					= document.getElementById('setPos');
			const clustersCollection 		= document.getElementsByClassName('cluster');
			const clusterImagesCollection	= document.getElementsByClassName('cluster--images');
			const clusters 					= [].slice.call(clustersCollection);
			const clusterImages 			= [].slice.call(clusterImagesCollection);

			randomiseBtn.addEventListener('click', function(){
				positionImages('random');
			});

			setBtn.addEventListener('click', function(){
				positionImages('set');
			});

			maskBtn.addEventListener('click', function(){
				clusterImages.forEach(clusterImg => {
					clusterImg.classList.toggle("circlemask");
				})
			});

			guideBtn.addEventListener('click', function(){
				clusters.forEach(cluster => {
					cluster.classList.toggle("guideline");
				})
			});

			function positionImages(type){
				switch(type){
					case 'random':
						randomPositions();
						break;
					case 'set':
					default:
						setPositions();
						break;
				}
			}

			function setPositions(){
				clusterImages.forEach(imgCluster => {
					const maxPos = 80;
					const images = [].slice.call(imgCluster.getElementsByTagName('img'));
					const positions = [
						{h: 100, v: 100},
						{h: -75, v: 100},
						{h: -75, v: -75},
						{h: 105, v: -75},
						{h: 20, v: -75},
						{h: 20, v: 100},
						{h: -75, v: 15},
						{h: 100, v: 15},
						{h: 20, v: 15},
					];

					for (var i = 0; i < images.length; i++) {
						if(positions[i]){
							images[i].style.cssText = `transform: translate(${positions[i].h}%, ${positions[i].v}%);`;
						} else {
							images[i].style.cssText = `transform: translate(300%, 300%);`;
						}
					}
				});
			}

			function randomPositions(){
				clusterImages.forEach(imgCluster => {
					const maxPos = 80;
					const images = [].slice.call(imgCluster.getElementsByTagName('img'));

					images.forEach(img => {
						const hor = Math.floor(Math.random() * maxPos);
						const ver = Math.floor(Math.random() * maxPos);

						horPlusMinus = Math.random() < 0.5 ? -hor : hor;
						verPlusMinus = Math.random() < 0.5 ? -ver : ver;

						img.style.cssText = `transform: translate(${horPlusMinus}%, ${verPlusMinus}%);`;
					});
				});
			}

			positionImages();
		</script>
	</body>
</html>